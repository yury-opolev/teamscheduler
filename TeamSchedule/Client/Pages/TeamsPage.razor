@page "/teams"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Linq.Dynamic.Core

@attribute [Authorize]

@inject ApiClient apiClient
@inject NavigationManager navigationManager
@inject StateContainer stateContainer

@inject DialogService dialogService

<PageTitle>Teams</PageTitle>

@if (this.teams is null)
{
    <div>Loading...</div>    
}
else
{
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click=@AddNewTeam />
    <RadzenDataGrid @ref="grid" IsLoading="@this.stateContainer.IsInProgress" Count="@this.teams.Count()" Data="@this.teams" LoadData="@LoadData" AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" PageSize="20" AllowPaging="true" AllowSorting="true" 
     TItem="Team" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And">
        <Columns>
            <RadzenDataGridColumn TItem="Team" Property="Name" Filterable="true" Title="Name" Frozen="true" Width="70px" />
        </Columns>
    </RadzenDataGrid>
}

@code {

    RadzenDataGrid<Team> grid;

    private int count { get; set; }

    private IList<Team> teams { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await this.stateContainer.TryFetchTeamsAsync(this.apiClient);
        this.teams = this.stateContainer.Teams.ToList();
    }

    private void LoadData(LoadDataArgs args)
    {
        var query = this.stateContainer.Teams.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        this.teams = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
    }

    public async Task AddNewTeam()
    {
        var team = new Team() 
        {
            Users = Array.Empty<TeamUser>(),
            Duties = Array.Empty<TeamDuty>(),
            CreatedBy = string.Empty
        };

        bool save = await this.dialogService.OpenAsync<TeamCardPage>("Add new team",
             new Dictionary<string, object>() { { "Team", team } },
             new DialogOptions() { Width = "600px", Resizable = true, Draggable = false });

        if (save)
        {
            await this.SaveChangesAsync(true, team);
            await this.grid.Reload();
        }
    }

    private async Task SaveChangesAsync(bool isNew, Team team)
    {
        var isSuccess = isNew ?
            await this.stateContainer.TryCreateTeamAsync(this.apiClient, team) :
            await this.stateContainer.TryUpdateTeamAsync(this.apiClient, team);

        if (isSuccess)
        {
            await this.stateContainer.TryFetchTeamsAsync(this.apiClient);
        }
    }
}
